#include <iostream>
#include <thread>
#include <chrono>
#include <fstream>
#include <vector>
#include <string>

// Estrutura simples para pixel
struct Pixel {
    unsigned char r, g, b;
    Pixel(unsigned char red = 0, unsigned char green = 0, unsigned char blue = 0) 
        : r(red), g(green), b(blue) {}
};

// Função para ler dados de imagem de um arquivo de texto
std::vector<std::vector<Pixel>> lerImagemTexto(const std::string& arquivo, int& width, int& height) {
    std::ifstream file(arquivo);
    std::vector<std::vector<Pixel>> image;
    
    if (file.is_open()) {
        file >> width >> height;
        
        image.resize(height, std::vector<Pixel>(width));
        
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int r, g, b;
                file >> r >> g >> b;
                image[y][x] = Pixel(r, g, b);
            }
        }
        
        file.close();
        std::cout << "Imagem carregada: " << width << "x" << height << " pixels" << std::endl;
    } else {
        std::cout << "Arquivo não encontrado: " << arquivo << std::endl;
        std::cout << "Execute primeiro o script Python para extrair os dados!" << std::endl;
    }
    
    return image;
}

// Aplicar filtro Sepia
void aplicarSepiaRegiao(std::vector<std::vector<Pixel>>& image, int startY, int endY, int threadId) {
    std::cout << "Thread " << threadId << " processando linhas " << startY << " ate " << endY << std::endl;
    
    for (int y = startY; y < endY; y++) {
        for (int x = 0; x < image[y].size(); x++) {
            Pixel& pixel = image[y][x];
            
            int originalR = pixel.r;
            int originalG = pixel.g;
            int originalB = pixel.b;
            
            // Fórmula Sepia
            int sepiaR = (int)(0.393 * originalR + 0.769 * originalG + 0.189 * originalB);
            int sepiaG = (int)(0.349 * originalR + 0.686 * originalG + 0.168 * originalB);
            int sepiaB = (int)(0.272 * originalR + 0.534 * originalG + 0.131 * originalB);
            
            pixel.r = (sepiaR > 255) ? 255 : sepiaR;
            pixel.g = (sepiaG > 255) ? 255 : sepiaG;
            pixel.b = (sepiaB > 255) ? 255 : sepiaB;
        }
    }
    
    std::cout << "Thread " << threadId << " TERMINOU!" << std::endl;
}

// Salvar imagem PPM
void salvarPPM(const std::vector<std::vector<Pixel>>& image, const std::string& filename) {
    std::ofstream file(filename);
    
    if (file.is_open()) {
        int width = image[0].size();
        int height = image.size();
        
        file << "P3\n" << width << " " << height << "\n255\n";
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                file << (int)image[y][x].r << " " << (int)image[y][x].g << " " << (int)image[y][x].b << " ";
            }
            file << "\n";
        }
        
        file.close();
        std::cout << "Arquivo salvo: " << filename << std::endl;
    }
}

int main() {
    std::cout << "=== PROCESSANDO SUA IMAGEM DA MACA ===" << std::endl;
    
    // Tentar carregar dados da imagem
    int width, height;
    std::vector<std::vector<Pixel>> image = lerImagemTexto("dados_maca.txt", width, height);
    
    if (image.empty()) {
        std::cout << "\nERRO: Não foi possível carregar a imagem!" << std::endl;
        std::cout << "Execute primeiro o script Python para extrair os dados da imagem." << std::endl;
        return 1;
    }
    
    // Salvar original
    std::cout << "\nSalvando cópia original..." << std::endl;
    salvarPPM(image, "maca_original_real.ppm");
    
    // Aplicar filtro Sepia
    std::cout << "\nAplicando filtro Sepia com 2 threads..." << std::endl;
    
    const int midY = height / 2;
    auto start = std::chrono::high_resolution_clock::now();
    
    std::thread t1(aplicarSepiaRegiao, std::ref(image), 0, midY, 1);
    std::thread t2(aplicarSepiaRegiao, std::ref(image), midY, height, 2);
    
    t1.join();
    t2.join();
    
    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    
    // Salvar resultado
    std::cout << "\nSalvando resultado..." << std::endl;
    salvarPPM(image, "maca_sepia_real.ppm");
    
    std::cout << "\n=== RESULTADO ===" << std::endl;
    std::cout << "Filtro Sepia aplicado na SUA imagem em " << duration.count() << "ms!" << std::endl;
    std::cout << "Pixels processados: " << (width * height) << std::endl;
    std::cout << "\nArquivos criados:" << std::endl;
    std::cout << "- maca_original_real.ppm (sua imagem original)" << std::endl;
    std::cout << "- maca_sepia_real.ppm (sua imagem com filtro sepia)" << std::endl;
    
    return 0;
}